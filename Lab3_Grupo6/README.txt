
Jhon Eduar Santofimio Medina  |  Alejandro Ramos Pérez  |  Nicolas La Rotta Mosquera  |  David Santiago Castañeda Vargas

Algoritmo que implementa la búsqueda de raíces por bisección.

def f(x): #Se define la función 
  return -x**4 + 30*(x**3) + 15*(x**2) + 34*x + 540   ----------------------------------------- O(1)

def biseccion(a,b,tol): 
  m1=a                 ------------------------------------------------------------------------ O(1)
  m=b                  ------------------------------------------------------------------------ O(1)
  k=0       	       ------------------------------------------------------------------------ O(1)
  if (f(a)*f(b)>0):    ------------------------------------------------------------------------ O(1)
    print('la funcion no cambia de signo') ---------------------------------------------------- O(1)

  while (abs(m1-m) > tol): -------------------------------------------------------------------- O(log(abs(m1-m))
    m1=m                   -------------------------------------------------------------------- O(1)
    m=(a+b)/2              -------------------------------------------------------------------- O(1)
    if (f(a)*f(m)<0):      -------------------------------------------------------------------- O(1)
      b=m                  -------------------------------------------------------------------- O(1)
    if (f(m)*f(b)<0):      -------------------------------------------------------------------- O(1)
      a=m                  -------------------------------------------------------------------- O(1)
    print('el intervalo es [',a,',',b,']') ---------------------------------------------------- O(1)
    k=k+1                  -------------------------------------------------------------------- O(1)
 

Calculo de complejidad del tiempo: 

O(n)= O(1)+O(1)+O(1)+O(1)+O(1)+O(1)+O(log(n)*[O(1)+O(1)+O(1)+O(1)+O(1)+O(1)+O(1)+O(1)]= O(log(abs(m1-m))